{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"2.2-DecisionTree","provenance":[{"file_id":"1TBox_GM4CltuZeL4lFvur1BHUbc_tw_6","timestamp":1638143903634}]},"kernelspec":{"name":"python3","display_name":"Python 3"}},"cells":[{"cell_type":"markdown","metadata":{"id":"PsHEfXcU6BW1"},"source":["How to Build CART Decision Trees Using Python"]},{"cell_type":"markdown","metadata":{"id":"NP_DzhXTXK2w"},"source":["We are ready to finally begin modeling our data, in the Modeling Phase. Data science offers a wide variety of methods and algorithms for modeling large data sets. We begin here with one of the simplest methods: decision trees. In this chapter we will work with the adult_ch6_training and the adult_ch6_test data sets. These are adapted from the Adult data set from the UCI repository. For simplicity, only two predictors and the target are retained, as follows: \n","* Marital status, a categorical predictor with classes married, divorced, never‐married, separated, and widowed.\n","* Cap_gains_losses, a numerical predictor, equal to capital gains + |capital losses|. \n","* Income, a categorical target variable with two classes, >50k and ≤50k, representing individuals whose income is greater than 50,000 per year, and those with income less than or equal to 50,000 per year. \n","\n","A decision tree consists of a set of decision nodes, connected by branches, extending downward from the root node until terminating in leaf nodes. Beginning at the root node, which by convention is placed at the top of the decision tree diagram, variables are tested at the decision nodes, with each possible outcome resulting in a branch. Each branch then leads either to another decision node or to a terminating leaf node."]},{"cell_type":"code","metadata":{"id":"LnATSMzV6EPJ","colab":{"base_uri":"https://localhost:8080/","height":258},"executionInfo":{"status":"ok","timestamp":1587497932541,"user_tz":420,"elapsed":1638,"user":{"displayName":"Arash Vafanejad","photoUrl":"","userId":"04224011047763529572"}},"outputId":"ef9720e5-80c7-46b7-e71e-1b4d14e1df09"},"source":["import pandas as pd\n","import numpy as np\n","import statsmodels.tools.tools as stattools\n","from sklearn.tree import DecisionTreeClassifier, export_graphviz\n","url = 'https://raw.githubusercontent.com/ArashVafa/DESC624/master/adult_ch6_training'\n","adult_tr = pd.read_csv(url)\n","adult_tr.head()\n","data = adult_tr\n","data.head()"],"execution_count":null,"outputs":[{"output_type":"stream","text":["/usr/local/lib/python3.6/dist-packages/statsmodels/tools/_testing.py:19: FutureWarning: pandas.util.testing is deprecated. Use the functions in the public API at pandas.testing instead.\n","  import pandas.util.testing as tm\n"],"name":"stderr"},{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Marital status</th>\n","      <th>Income</th>\n","      <th>Cap_Gains_Losses</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>Never-married</td>\n","      <td>&lt;=50K</td>\n","      <td>0.02174</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>Divorced</td>\n","      <td>&lt;=50K</td>\n","      <td>0.00000</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>Married</td>\n","      <td>&lt;=50K</td>\n","      <td>0.00000</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>Married</td>\n","      <td>&lt;=50K</td>\n","      <td>0.00000</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>Married</td>\n","      <td>&lt;=50K</td>\n","      <td>0.00000</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["  Marital status Income  Cap_Gains_Losses\n","0  Never-married  <=50K           0.02174\n","1       Divorced  <=50K           0.00000\n","2        Married  <=50K           0.00000\n","3        Married  <=50K           0.00000\n","4        Married  <=50K           0.00000"]},"metadata":{"tags":[]},"execution_count":1}]},{"cell_type":"markdown","metadata":{"id":"UvWtt36uTpMn"},"source":["Data Preprocessing "]},{"cell_type":"code","metadata":{"id":"p2Xjfr-Q6bGG"},"source":["y = adult_tr[['Income']]"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"nPu19ZTza8qd","colab":{"base_uri":"https://localhost:8080/","height":204},"executionInfo":{"status":"ok","timestamp":1587497932543,"user_tz":420,"elapsed":1620,"user":{"displayName":"Arash Vafanejad","photoUrl":"","userId":"04224011047763529572"}},"outputId":"6d739a9a-3b04-41e8-e1b6-46fb52cc140e"},"source":["y.head()"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Income</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>&lt;=50K</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>&lt;=50K</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>&lt;=50K</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>&lt;=50K</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>&lt;=50K</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["  Income\n","0  <=50K\n","1  <=50K\n","2  <=50K\n","3  <=50K\n","4  <=50K"]},"metadata":{"tags":[]},"execution_count":3}]},{"cell_type":"markdown","metadata":{"id":"XWT-C56G6eVh"},"source":["We have a categorical variable, Marital status, among our predictors. The CART model implemented in the sklearn package needs categorical variables converted to a dummy variable form. Thus, we will make a series of dummy variables for Marital status using the categorical() command."]},{"cell_type":"code","metadata":{"id":"QJ5zFLpP6fLl"},"source":["mar_np = np.array(adult_tr['Marital status'])\n","(mar_cat, mar_cat_dict) = stattools.categorical(mar_np, dictnames = True)#, drop = True)\n","\n","#stattools.categorical(mar_np)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"izCBsbDabBYX","colab":{"base_uri":"https://localhost:8080/","height":136},"executionInfo":{"status":"ok","timestamp":1587497932544,"user_tz":420,"elapsed":1604,"user":{"displayName":"Arash Vafanejad","photoUrl":"","userId":"04224011047763529572"}},"outputId":"ef459939-22fc-4999-e2d7-2e74c0a2407d"},"source":["mar_cat"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([['Never-married', 0.0, 0.0, 1.0, 0.0, 0.0],\n","       ['Divorced', 1.0, 0.0, 0.0, 0.0, 0.0],\n","       ['Married', 0.0, 1.0, 0.0, 0.0, 0.0],\n","       ...,\n","       ['Married', 0.0, 1.0, 0.0, 0.0, 0.0],\n","       ['Divorced', 1.0, 0.0, 0.0, 0.0, 0.0],\n","       ['Married', 0.0, 1.0, 0.0, 0.0, 0.0]], dtype=object)"]},"metadata":{"tags":[]},"execution_count":5}]},{"cell_type":"markdown","metadata":{"id":"GiC_o_4e6s0m"},"source":["We turn the variable Marital status into an array using array(), then use the categorical() command from the stattools package to create a matrix of dummy variables for each value of Marital status. We save the matrix and dictionary separately using (mar_cat, mar_cat_dict).\n","\n","The matrix mar_cat contains five columns, one for each category in the original Marital status variable. Each row represents a record in the adult_tr data set. Each row will have a 1 in the column which matches the value that record had in the original Marital status variable. You can tell which column represents which category by examining mar_cat_dict. In our case, the first row of mar_cat has a 1 in the third column. By examining mar_cat_dict, we know the third column represents the “Never married” category. Sure enough, the first record of adult_tr has “Never married” as the Marital status variable value.\n","\n","Now, we need to add the newly made dummy variables back into the X variables.\n","\n"]},{"cell_type":"code","metadata":{"id":"P7b--KSL6thv"},"source":["mar_cat_pd = pd.DataFrame(mar_cat)\n","X = pd.concat((adult_tr[['Cap_Gains_Losses']], mar_cat_pd), axis = 1)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"MfcNyaL_bQf6"},"source":["mar_cat_pd.columns = ['MS', \"1\", \"2\", \"3\",\n","     \"4\", \"5\"]"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"Tckq3NQGdRL9","colab":{"base_uri":"https://localhost:8080/","height":419},"executionInfo":{"status":"ok","timestamp":1587497932545,"user_tz":420,"elapsed":1584,"user":{"displayName":"Arash Vafanejad","photoUrl":"","userId":"04224011047763529572"}},"outputId":"044ff668-8ae6-4b64-bee2-6517b0fd209e"},"source":["mar_cat_pd"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>MS</th>\n","      <th>1</th>\n","      <th>2</th>\n","      <th>3</th>\n","      <th>4</th>\n","      <th>5</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>Never-married</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>Divorced</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>Married</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>Married</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>Married</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>18756</th>\n","      <td>Divorced</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>18757</th>\n","      <td>Married</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>18758</th>\n","      <td>Married</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>18759</th>\n","      <td>Divorced</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>18760</th>\n","      <td>Married</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>18761 rows × 6 columns</p>\n","</div>"],"text/plain":["                  MS  1  2  3  4  5\n","0      Never-married  0  0  1  0  0\n","1           Divorced  1  0  0  0  0\n","2            Married  0  1  0  0  0\n","3            Married  0  1  0  0  0\n","4            Married  0  1  0  0  0\n","...              ... .. .. .. .. ..\n","18756       Divorced  1  0  0  0  0\n","18757        Married  0  1  0  0  0\n","18758        Married  0  1  0  0  0\n","18759       Divorced  1  0  0  0  0\n","18760        Married  0  1  0  0  0\n","\n","[18761 rows x 6 columns]"]},"metadata":{"tags":[]},"execution_count":8}]},{"cell_type":"code","metadata":{"id":"4lyPqZzwR-rH","colab":{"base_uri":"https://localhost:8080/","height":204},"executionInfo":{"status":"ok","timestamp":1587497932546,"user_tz":420,"elapsed":1577,"user":{"displayName":"Arash Vafanejad","photoUrl":"","userId":"04224011047763529572"}},"outputId":"9409b53b-ab1e-4d2d-9481-a685e4ec1008"},"source":["X.head()"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Cap_Gains_Losses</th>\n","      <th>0</th>\n","      <th>1</th>\n","      <th>2</th>\n","      <th>3</th>\n","      <th>4</th>\n","      <th>5</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>0.02174</td>\n","      <td>Never-married</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>0.00000</td>\n","      <td>Divorced</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>0.00000</td>\n","      <td>Married</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>0.00000</td>\n","      <td>Married</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>0.00000</td>\n","      <td>Married</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["   Cap_Gains_Losses              0  1  2  3  4  5\n","0           0.02174  Never-married  0  0  1  0  0\n","1           0.00000       Divorced  1  0  0  0  0\n","2           0.00000        Married  0  1  0  0  0\n","3           0.00000        Married  0  1  0  0  0\n","4           0.00000        Married  0  1  0  0  0"]},"metadata":{"tags":[]},"execution_count":9}]},{"cell_type":"markdown","metadata":{"id":"nWtNpQZJ6ydA"},"source":["We first make the mar_cat matrix a data frame using the DataFrame() command. We then use the concat() command to attach the predictor variable Cap_Gains_Losses to the data frame of dummy variables that represent marital status. We save the result as X.\n","\n","Before we run the CART algorithm, note that the columns of X do not include the different values of the Marital status variable. Run mar_cat_dict to see that the first column is for the value “Divorced,” the second for “Married,” and so on. Since the first column of X is Cap_Gains_Losses, we can specify the names of each column of X.\n","\n"]},{"cell_type":"code","metadata":{"id":"wNJq2D0n61s4"},"source":["X_names = [\"Cap_Gains_Losses\", \"Divorced\", \"Married\", \"Never-married\",\n","     \"Separated\", \"Widowed\"]"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"5rcOBzE1TPQY","colab":{"base_uri":"https://localhost:8080/","height":204},"executionInfo":{"status":"ok","timestamp":1587497932546,"user_tz":420,"elapsed":1559,"user":{"displayName":"Arash Vafanejad","photoUrl":"","userId":"04224011047763529572"}},"outputId":"9f6629b3-4f82-478a-c68f-692316b9ddcf"},"source":["X.head()"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Cap_Gains_Losses</th>\n","      <th>0</th>\n","      <th>1</th>\n","      <th>2</th>\n","      <th>3</th>\n","      <th>4</th>\n","      <th>5</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>0.02174</td>\n","      <td>Never-married</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>0.00000</td>\n","      <td>Divorced</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>0.00000</td>\n","      <td>Married</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>0.00000</td>\n","      <td>Married</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>0.00000</td>\n","      <td>Married</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["   Cap_Gains_Losses              0  1  2  3  4  5\n","0           0.02174  Never-married  0  0  1  0  0\n","1           0.00000       Divorced  1  0  0  0  0\n","2           0.00000        Married  0  1  0  0  0\n","3           0.00000        Married  0  1  0  0  0\n","4           0.00000        Married  0  1  0  0  0"]},"metadata":{"tags":[]},"execution_count":11}]},{"cell_type":"markdown","metadata":{"id":"_27s7-T7659o"},"source":["It will help us when visualizing the CART model to know the levels of y as well."]},{"cell_type":"code","metadata":{"id":"ZE419mKw68lh"},"source":["y_names = [\"<=50K\", \">50K\"]"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"E0vKEHsbVc_U","colab":{"base_uri":"https://localhost:8080/","height":204},"executionInfo":{"status":"ok","timestamp":1587497932547,"user_tz":420,"elapsed":1544,"user":{"displayName":"Arash Vafanejad","photoUrl":"","userId":"04224011047763529572"}},"outputId":"3682a2c0-0147-4dd5-9270-2158926f9888"},"source":["y.head()"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Income</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>&lt;=50K</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>&lt;=50K</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>&lt;=50K</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>&lt;=50K</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>&lt;=50K</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["  Income\n","0  <=50K\n","1  <=50K\n","2  <=50K\n","3  <=50K\n","4  <=50K"]},"metadata":{"tags":[]},"execution_count":13}]},{"cell_type":"code","metadata":{"id":"mvFhBCQyf3JN"},"source":["X2 = pd.concat((adult_tr[['Cap_Gains_Losses']], mar_cat_pd), axis = 1)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"_WjZvnjOGvst","colab":{"base_uri":"https://localhost:8080/","height":204},"executionInfo":{"status":"ok","timestamp":1587497932718,"user_tz":420,"elapsed":1699,"user":{"displayName":"Arash Vafanejad","photoUrl":"","userId":"04224011047763529572"}},"outputId":"ec121e6b-71de-42f7-d15b-389ccc9c7e36"},"source":["X2.head()"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Cap_Gains_Losses</th>\n","      <th>MS</th>\n","      <th>1</th>\n","      <th>2</th>\n","      <th>3</th>\n","      <th>4</th>\n","      <th>5</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>0.02174</td>\n","      <td>Never-married</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>0.00000</td>\n","      <td>Divorced</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>0.00000</td>\n","      <td>Married</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>0.00000</td>\n","      <td>Married</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>0.00000</td>\n","      <td>Married</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["   Cap_Gains_Losses             MS  1  2  3  4  5\n","0           0.02174  Never-married  0  0  1  0  0\n","1           0.00000       Divorced  1  0  0  0  0\n","2           0.00000        Married  0  1  0  0  0\n","3           0.00000        Married  0  1  0  0  0\n","4           0.00000        Married  0  1  0  0  0"]},"metadata":{"tags":[]},"execution_count":15}]},{"cell_type":"code","metadata":{"id":"UixVIjWhGhO7"},"source":["X2 = X2.drop(columns = ['MS'])"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"3WAiThMlSY-y","colab":{"base_uri":"https://localhost:8080/","height":119},"executionInfo":{"status":"ok","timestamp":1587497932719,"user_tz":420,"elapsed":1684,"user":{"displayName":"Arash Vafanejad","photoUrl":"","userId":"04224011047763529572"}},"outputId":"471591c2-81d8-40dd-e356-57588483c3cd"},"source":["dt = DecisionTreeClassifier(criterion = 'gini', max_leaf_nodes=5)\n","dt.fit(X2, y)"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',\n","                       max_depth=None, max_features=None, max_leaf_nodes=5,\n","                       min_impurity_decrease=0.0, min_impurity_split=None,\n","                       min_samples_leaf=1, min_samples_split=2,\n","                       min_weight_fraction_leaf=0.0, presort='deprecated',\n","                       random_state=None, splitter='best')"]},"metadata":{"tags":[]},"execution_count":17}]},{"cell_type":"code","metadata":{"id":"jvFxpnqAfPSH","colab":{"base_uri":"https://localhost:8080/","height":71},"executionInfo":{"status":"ok","timestamp":1587497932719,"user_tz":420,"elapsed":1676,"user":{"displayName":"Arash Vafanejad","photoUrl":"","userId":"04224011047763529572"}},"outputId":"7080c48d-f7d1-4e54-9a5c-3769d1db033c"},"source":["from sklearn.tree import DecisionTreeClassifier\n","from sklearn.model_selection import train_test_split\n","from sklearn.metrics import confusion_matrix\n","from sklearn.tree import export_graphviz\n","from sklearn.externals.six import StringIO \n","from IPython.display import Image \n","from pydot import graph_from_dot_data\n","import pandas as pd\n","import numpy as np"],"execution_count":null,"outputs":[{"output_type":"stream","text":["/usr/local/lib/python3.6/dist-packages/sklearn/externals/six.py:31: FutureWarning: The module is deprecated in version 0.21 and will be removed in version 0.23 since we've dropped support for Python 2.7. Please rely on the official version of six (https://pypi.org/project/six/).\n","  \"(https://pypi.org/project/six/).\", FutureWarning)\n"],"name":"stderr"}]},{"cell_type":"code","metadata":{"id":"zqpJnWirSMuT","colab":{"base_uri":"https://localhost:8080/","height":514},"executionInfo":{"status":"ok","timestamp":1587497932983,"user_tz":420,"elapsed":1932,"user":{"displayName":"Arash Vafanejad","photoUrl":"","userId":"04224011047763529572"}},"outputId":"0f8f7738-e337-4152-bb9f-8b81fa6a22e9"},"source":["dot_data = StringIO()\n","export_graphviz(dt, out_file=dot_data, feature_names=X_names)\n","(graph, ) = graph_from_dot_data(dot_data.getvalue())\n","Image(graph.create_png())"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"image/png":"\n","text/plain":["<IPython.core.display.Image object>"]},"metadata":{"tags":[]},"execution_count":19}]},{"cell_type":"code","metadata":{"id":"-5m9Znrh7AeT"},"source":["cart01 = DecisionTreeClassifier(criterion = 'gini', max_leaf_nodes=5).fit(X2,y)"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"0FEqYlCb7F12"},"source":["To run the CART algorithm, we use the DecisionTreeClassifier() command. The DecisionTreeClassifier() command sets up the various parameters for the decision tree. For example, the criterion = “gini” input specifies that we are using a CART model which utilizes the Gini criterion, and the max_leaf_nodes input trims the CART tree to have at most the specified number of leaf nodes. For this example, we have limited our tree to five leaf nodes.\n","\n","The fit() command tells Python to fit the decision tree that was previously specified to the data. The predictor variables are given first, followed by the target variable. Thus, the two inputs to fit() are the X and y objects we created. We save the decision tree as cart01.\n","\n","Finally, to obtain the tree structure, we use the export_graphviz() command.\n","\n"]},{"cell_type":"code","metadata":{"id":"3O0uv1eS7GyL"},"source":["export_graphviz(cart01, out_file = \"test.dot\", feature_names=X_names, class_names=y_names)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"ITMozI3x7Kyf"},"source":["predIncomeCART = cart01.predict(X2)"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"BB32geYj7825"},"source":["**How to Build C5.0 Decision Trees Using Python**\n","\n","\n","The C5.0 algorithm is J. Ross Quinlan's extension of his own C4.5 algorithm for generating decision trees.5Unlike CART, the C5.0 algorithm is not restricted to binary splits. The 5.0 algorithm uses the concept of information gain or entropy reduction to select the optimal split.\n","\n","\n","Python packages do not directly implement C5.0. Instead, we will again use the sklearn package, this time changing the splitting criterion from Gini to entropy.\n","\n","Before running the code in this section, run the code in the previous Python section, up to but excluding the paragraph that begins “Now we are ready to run the CART algorithm!” The code contained there will set up our variables and variable names in preparation for running this decision tree.\n","\n","To obtain the decision tree using entropy as a splitting criterion, we again use the DecisionTreeClassifier() command."]},{"cell_type":"code","metadata":{"id":"mLym_-Fb79dQ"},"source":["c50_01 = DecisionTreeClassifier(criterion=\"entropy\", max_leaf_nodes=5).fit(X2,y)"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"LzMkyI0E8Jom"},"source":["The input criterion = “entropy” uses information gain to identify the best candidate split.\n","\n","To export the summary of the C5.0 tree, run the export_graphviz() command. The code is given below, with its explanation in the previous Python section.\n","\n"]},{"cell_type":"markdown","metadata":{"id":"yE1EfKdW8Tqb"},"source":["**How to Build Random Forests in Python**\n","\n","As before, run the code in the CART Python section, up to but excluding the code in the paragraph that begins “Now we are ready to run the CART algorithm!” You will need to run the code to set up the predictor and target variables for the code in this section.\n","\n","Next, load the required libraries."]},{"cell_type":"code","metadata":{"id":"v6PHHHCJ8KZH"},"source":["from sklearn.ensemble import RandomForestClassifier\n","import numpy as np"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"C-3pQ48Y8Z6j"},"source":["The random forest command in Python requires a response variable formatted as a one‐dimensional array, so we use numpy's ravel() command to create that format."]},{"cell_type":"code","metadata":{"id":"6nZFwMEl8cQA"},"source":["rfy = np.ravel(y)"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"CwhdBEmP8ef-"},"source":["We use the RandomForestClassifier() command to create the random forest."]},{"cell_type":"code","metadata":{"id":"95mzhPT18gpp"},"source":["rf01 = RandomForestClassifier(n_estimators = 100, criterion=\"gini\").fit(X2,rfy)"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"16JPISHS8j_S"},"source":["As before, the RandomForestClassifier() command sets up the parameters of the algorithm. The n_estimators input specifies the number of trees to be built, while the criterion = “gini” specifies the Gini Index be used to determine the best splits. The fit() command uses the predictor variables X and target variable y to build the actual decision trees. Save the result as rf01.\n","\n","To view the classifications made on the training data set by the random forests algorithm, use the predict() command.\n","\n"]},{"cell_type":"code","metadata":{"id":"33JMh3Nl8ki5","colab":{"base_uri":"https://localhost:8080/","height":51},"executionInfo":{"status":"ok","timestamp":1587497933824,"user_tz":420,"elapsed":2684,"user":{"displayName":"Arash Vafanejad","photoUrl":"","userId":"04224011047763529572"}},"outputId":"438826f0-a891-4d1c-b3a8-c6d637b7b1a6"},"source":["rf01.predict(X2)"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array(['<=50K', '<=50K', '<=50K', ..., '<=50K', '<=50K', '<=50K'],\n","      dtype=object)"]},"metadata":{"tags":[]},"execution_count":27}]},{"cell_type":"markdown","metadata":{"id":"hqNaUyXx9Zkg"},"source":["https://towardsdatascience.com/decision-tree-in-python-b433ae57fb93"]},{"cell_type":"code","metadata":{"id":"myl_FM0q8xWG"},"source":["from sklearn.datasets import load_iris\n","from sklearn.tree import DecisionTreeClassifier\n","from sklearn.model_selection import train_test_split\n","from sklearn.metrics import confusion_matrix\n","from sklearn.tree import export_graphviz\n","from sklearn.externals.six import StringIO \n","from IPython.display import Image \n","from pydot import graph_from_dot_data\n","import pandas as pd\n","import numpy as np"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"P8wpWP1b835B"},"source":["iris = load_iris()\n","X = pd.DataFrame(iris.data, columns=iris.feature_names)\n","y = pd.Categorical.from_codes(iris.target, iris.target_names)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"gstuF3XI86Pb","colab":{"base_uri":"https://localhost:8080/","height":204},"executionInfo":{"status":"ok","timestamp":1587497933825,"user_tz":420,"elapsed":2647,"user":{"displayName":"Arash Vafanejad","photoUrl":"","userId":"04224011047763529572"}},"outputId":"4133eda6-cbf6-435e-936f-57766a599630"},"source":["X.head()"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>sepal length (cm)</th>\n","      <th>sepal width (cm)</th>\n","      <th>petal length (cm)</th>\n","      <th>petal width (cm)</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>5.1</td>\n","      <td>3.5</td>\n","      <td>1.4</td>\n","      <td>0.2</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>4.9</td>\n","      <td>3.0</td>\n","      <td>1.4</td>\n","      <td>0.2</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>4.7</td>\n","      <td>3.2</td>\n","      <td>1.3</td>\n","      <td>0.2</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>4.6</td>\n","      <td>3.1</td>\n","      <td>1.5</td>\n","      <td>0.2</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>5.0</td>\n","      <td>3.6</td>\n","      <td>1.4</td>\n","      <td>0.2</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["   sepal length (cm)  sepal width (cm)  petal length (cm)  petal width (cm)\n","0                5.1               3.5                1.4               0.2\n","1                4.9               3.0                1.4               0.2\n","2                4.7               3.2                1.3               0.2\n","3                4.6               3.1                1.5               0.2\n","4                5.0               3.6                1.4               0.2"]},"metadata":{"tags":[]},"execution_count":30}]},{"cell_type":"code","metadata":{"id":"nsRM9aI89TSP"},"source":["y = pd.get_dummies(y)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"yEHrJ5pTYiP_","colab":{"base_uri":"https://localhost:8080/","height":204},"executionInfo":{"status":"ok","timestamp":1587497934095,"user_tz":420,"elapsed":2869,"user":{"displayName":"Arash Vafanejad","photoUrl":"","userId":"04224011047763529572"}},"outputId":"94f8c3bc-218b-45e9-9d19-df2debb9d964"},"source":["y.tail()"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>setosa</th>\n","      <th>versicolor</th>\n","      <th>virginica</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>145</th>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>146</th>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>147</th>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>148</th>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>149</th>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["     setosa  versicolor  virginica\n","145       0           0          1\n","146       0           0          1\n","147       0           0          1\n","148       0           0          1\n","149       0           0          1"]},"metadata":{"tags":[]},"execution_count":32}]},{"cell_type":"code","metadata":{"id":"fe81scKs9W3Y"},"source":["X_train, X_test, y_train, y_test = train_test_split(X, y, random_state=1)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"plxpC4aRX5K3","colab":{"base_uri":"https://localhost:8080/","height":204},"executionInfo":{"status":"ok","timestamp":1587497934096,"user_tz":420,"elapsed":2849,"user":{"displayName":"Arash Vafanejad","photoUrl":"","userId":"04224011047763529572"}},"outputId":"7487d0c6-5808-48c6-eab3-c7fc88990e9d"},"source":["X_train.head()"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>sepal length (cm)</th>\n","      <th>sepal width (cm)</th>\n","      <th>petal length (cm)</th>\n","      <th>petal width (cm)</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>54</th>\n","      <td>6.5</td>\n","      <td>2.8</td>\n","      <td>4.6</td>\n","      <td>1.5</td>\n","    </tr>\n","    <tr>\n","      <th>108</th>\n","      <td>6.7</td>\n","      <td>2.5</td>\n","      <td>5.8</td>\n","      <td>1.8</td>\n","    </tr>\n","    <tr>\n","      <th>112</th>\n","      <td>6.8</td>\n","      <td>3.0</td>\n","      <td>5.5</td>\n","      <td>2.1</td>\n","    </tr>\n","    <tr>\n","      <th>17</th>\n","      <td>5.1</td>\n","      <td>3.5</td>\n","      <td>1.4</td>\n","      <td>0.3</td>\n","    </tr>\n","    <tr>\n","      <th>119</th>\n","      <td>6.0</td>\n","      <td>2.2</td>\n","      <td>5.0</td>\n","      <td>1.5</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["     sepal length (cm)  sepal width (cm)  petal length (cm)  petal width (cm)\n","54                 6.5               2.8                4.6               1.5\n","108                6.7               2.5                5.8               1.8\n","112                6.8               3.0                5.5               2.1\n","17                 5.1               3.5                1.4               0.3\n","119                6.0               2.2                5.0               1.5"]},"metadata":{"tags":[]},"execution_count":34}]},{"cell_type":"code","metadata":{"id":"-gA3y3Ju9c2X","colab":{"base_uri":"https://localhost:8080/","height":119},"executionInfo":{"status":"ok","timestamp":1587497934096,"user_tz":420,"elapsed":2835,"user":{"displayName":"Arash Vafanejad","photoUrl":"","userId":"04224011047763529572"}},"outputId":"739f14a4-cb80-482b-824e-82f46efdd315"},"source":["dt = DecisionTreeClassifier(criterion='gini', max_leaf_nodes=3)\n","dt.fit(X_train, y_train)"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',\n","                       max_depth=None, max_features=None, max_leaf_nodes=3,\n","                       min_impurity_decrease=0.0, min_impurity_split=None,\n","                       min_samples_leaf=1, min_samples_split=2,\n","                       min_weight_fraction_leaf=0.0, presort='deprecated',\n","                       random_state=None, splitter='best')"]},"metadata":{"tags":[]},"execution_count":35}]},{"cell_type":"code","metadata":{"id":"bZmVukls9g2G","colab":{"base_uri":"https://localhost:8080/","height":496},"executionInfo":{"status":"ok","timestamp":1587497934097,"user_tz":420,"elapsed":2824,"user":{"displayName":"Arash Vafanejad","photoUrl":"","userId":"04224011047763529572"}},"outputId":"58136e6f-7f5d-4ffc-99a6-0cbe844c3352"},"source":["dot_data = StringIO()\n","export_graphviz(dt, out_file=dot_data, feature_names=iris.feature_names)\n","(graph, ) = graph_from_dot_data(dot_data.getvalue())\n","Image(graph.create_png())"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"image/png":"\n","text/plain":["<IPython.core.display.Image object>"]},"metadata":{"tags":[]},"execution_count":36}]},{"cell_type":"code","metadata":{"id":"A6a_uThj9qNu"},"source":["y_pred = dt.predict(X_test)"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"QaYSqbu0Yelu"},"source":["setosa = 1 0 0\n","\n","versicolor = 0 1 0\n","\n","virginica = 0 0 1"]},{"cell_type":"markdown","metadata":{"id":"5dVJvhE3MUc5"},"source":["Random Forrest:\n","\n","https://towardsdatascience.com/random-forest-in-python-24d0893d51c0"]},{"cell_type":"code","metadata":{"id":"H4gmUXHcbzzq"},"source":["from sklearn.ensemble import RandomForestRegressor\n","rf = RandomForestRegressor(n_estimators=5)\n","rf.fit(X_train, y_train)\n","predicted_y_test = rf.predict(X_test)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"vh4qo-qPKXlc","colab":{"base_uri":"https://localhost:8080/","height":85},"executionInfo":{"status":"ok","timestamp":1587497934255,"user_tz":420,"elapsed":2943,"user":{"displayName":"Arash Vafanejad","photoUrl":"","userId":"04224011047763529572"}},"outputId":"3048ef49-0510-41d7-e4a8-7ca7e76fd715"},"source":["# Use the forest's predict method on the test data\n","predictions = rf.predict(X_test)\n","# Calculate the absolute errors\n","errors = abs(predictions - y_test)\n","# Print out the mean absolute error (mae)\n","print('Mean Absolute Error:', round(np.mean(errors), 2), 'degrees.')"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Mean Absolute Error: setosa        0.00\n","versicolor    0.03\n","virginica     0.03\n","dtype: float64 degrees.\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"O2oQBPJVLK9i","colab":{"base_uri":"https://localhost:8080/","height":85},"executionInfo":{"status":"ok","timestamp":1587497934256,"user_tz":420,"elapsed":2915,"user":{"displayName":"Arash Vafanejad","photoUrl":"","userId":"04224011047763529572"}},"outputId":"d69dc513-082e-4f61-c5dc-0949dca28285"},"source":["# Calculate mean absolute percentage error (MAPE)\n","mape = 100 * (errors / y_test)\n","# Calculate and display accuracy\n","accuracy = 100 - np.mean(mape)\n","print('Accuracy:', round(accuracy, 2), '%.')"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Accuracy: setosa        100.00\n","versicolor     93.75\n","virginica       -inf\n","dtype: float64 %.\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"PPxZVk4s9w7S"},"source":["![alt text](https://miro.medium.com/proxy/1*7EYylA6XlXSGBCF77j_rOA.png)"]},{"cell_type":"code","metadata":{"id":"yIVlyODW9wm1","colab":{"base_uri":"https://localhost:8080/","height":68},"executionInfo":{"status":"ok","timestamp":1587497934259,"user_tz":420,"elapsed":2892,"user":{"displayName":"Arash Vafanejad","photoUrl":"","userId":"04224011047763529572"}},"outputId":"c20dbff2-c595-416d-c753-9fcd6c2bf66e"},"source":["species = np.array(y_test).argmax(axis=1)\n","predictions = np.array(y_pred).argmax(axis=1)\n","confusion_matrix(species, predictions)"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([[13,  0,  0],\n","       [ 0, 15,  1],\n","       [ 0,  0,  9]])"]},"metadata":{"tags":[]},"execution_count":41}]},{"cell_type":"code","metadata":{"id":"1WC8rKLJsQIM"},"source":["rf = RandomForestRegressor(n_estimators=10, max_depth = 3)\n","rf.fit(X_train, y_train)\n","\n","# Extract the small tree\n","tree_small = rf.estimators_[2]\n","# Save the tree as a png image\n","export_graphviz(tree_small, out_file = 'small_tree.dot', feature_names = iris.feature_names, rounded = True, precision = 1)\n","#(graph, ) = pydot.graph_from_dot_file('small_tree.dot')\n","graph.write_png('small_tree.png');"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"hUfskby7V2uP","colab":{"base_uri":"https://localhost:8080/","height":85},"executionInfo":{"status":"ok","timestamp":1587497934260,"user_tz":420,"elapsed":2868,"user":{"displayName":"Arash Vafanejad","photoUrl":"","userId":"04224011047763529572"}},"outputId":"728e7c11-e42c-4afc-9548-b892f4f647d8"},"source":["# Get numerical feature importances\n","importances = list(rf.feature_importances_)\n","# List of tuples with variable and importance\n","feature_importances = [(feature, round(importance, 2)) for feature, importance in zip(iris.feature_names, importances)]\n","# Sort the feature importances by most important first\n","feature_importances = sorted(feature_importances, key = lambda x: x[1], reverse = True)\n","# Print out the feature and importances \n","[print('Variable: {:20} Importance: {}'.format(*pair)) for pair in feature_importances];"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Variable: petal width (cm)     Importance: 0.69\n","Variable: petal length (cm)    Importance: 0.3\n","Variable: sepal length (cm)    Importance: 0.0\n","Variable: sepal width (cm)     Importance: 0.0\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"zBDkvjs0ZXhl"},"source":["Decision Trees for Regression"]},{"cell_type":"code","metadata":{"id":"x8zea5KxZauF","colab":{"base_uri":"https://localhost:8080/","height":204},"executionInfo":{"status":"ok","timestamp":1587497934260,"user_tz":420,"elapsed":2852,"user":{"displayName":"Arash Vafanejad","photoUrl":"","userId":"04224011047763529572"}},"outputId":"9a22278c-9c77-4e6d-f3e0-05d9ec177808"},"source":["import pandas as pd\n","from sklearn import datasets\n","\n","boston = datasets.load_boston()            # Load Boston Dataset\n","df = pd.DataFrame(boston.data[:, 12])      # Create DataFrame using only the LSAT feature\n","df.columns = ['LSTAT']\n","df['MEDV'] = boston.target                 # Create new column with the target MEDV\n","df.head()"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>LSTAT</th>\n","      <th>MEDV</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>4.98</td>\n","      <td>24.0</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>9.14</td>\n","      <td>21.6</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>4.03</td>\n","      <td>34.7</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>2.94</td>\n","      <td>33.4</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>5.33</td>\n","      <td>36.2</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["   LSTAT  MEDV\n","0   4.98  24.0\n","1   9.14  21.6\n","2   4.03  34.7\n","3   2.94  33.4\n","4   5.33  36.2"]},"metadata":{"tags":[]},"execution_count":44}]},{"cell_type":"code","metadata":{"id":"oONDg8a9ZdT9","colab":{"base_uri":"https://localhost:8080/","height":119},"executionInfo":{"status":"ok","timestamp":1587497934261,"user_tz":420,"elapsed":2838,"user":{"displayName":"Arash Vafanejad","photoUrl":"","userId":"04224011047763529572"}},"outputId":"8b42b35b-10fc-4c78-8134-0f0c277f96d2"},"source":["from sklearn.tree import DecisionTreeRegressor    # Import decision tree regression model\n","\n","X = df[['LSTAT']].values                          # Assign matrix X\n","y = df['MEDV'].values                             # Assign vector y\n","\n","sort_idx = X.flatten().argsort()                  # Sort X and y by ascending values of X\n","X = X[sort_idx]\n","y = y[sort_idx]\n","\n","tree = DecisionTreeRegressor(criterion='mse',     # Initialize and fit regressor\n","                             max_depth=3)         \n","tree.fit(X, y)"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["DecisionTreeRegressor(ccp_alpha=0.0, criterion='mse', max_depth=3,\n","                      max_features=None, max_leaf_nodes=None,\n","                      min_impurity_decrease=0.0, min_impurity_split=None,\n","                      min_samples_leaf=1, min_samples_split=2,\n","                      min_weight_fraction_leaf=0.0, presort='deprecated',\n","                      random_state=None, splitter='best')"]},"metadata":{"tags":[]},"execution_count":45}]},{"cell_type":"code","metadata":{"id":"MRPOvNBjZf5n","colab":{"base_uri":"https://localhost:8080/","height":490},"executionInfo":{"status":"ok","timestamp":1587497934740,"user_tz":420,"elapsed":3310,"user":{"displayName":"Arash Vafanejad","photoUrl":"","userId":"04224011047763529572"}},"outputId":"30a75722-59f8-4fdc-a086-f43195439c49"},"source":["import matplotlib.pyplot as plt\n","\n","plt.figure(figsize=(16, 8))\n","plt.scatter(X, y, c='steelblue',                  # Plot actual target against features\n","            edgecolor='white', s=70)\n","plt.plot(X, tree.predict(X),                      # Plot predicted target against features\n","         color='black', lw=2)\n","plt.xlabel('% lower status of the population [LSTAT]')\n","plt.ylabel('Price in $1000s [MEDV]')\n","plt.show()"],"execution_count":null,"outputs":[{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 1152x576 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"code","metadata":{"id":"bBVSkbZ19KMm"},"source":[""],"execution_count":null,"outputs":[]}]}